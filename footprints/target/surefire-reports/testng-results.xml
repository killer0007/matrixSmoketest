<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="37" failed="3" ignored="14" total="172" passed="118">
  <reporter-output>
    <line>
      <![CDATA[About to begin executing Test ServiceProviderCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Failed]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Failed]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.SPcasereg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Completed executing test ServiceProviderCaseRegistration]]>
    </line>
    <line>
      <![CDATA[About to begin executing Test FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.FullFlow]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Completed executing test FullFlow]]>
    </line>
    <line>
      <![CDATA[About to begin executing Test CLIENT CASE]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Failed]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
    </line>
    <line>
      <![CDATA[Test Status: Skipped]]>
    </line>
    <line>
      <![CDATA[Completed executing test CLIENT CASE]]>
    </line>
    <line>
      <![CDATA[About to begin executing Test CANDIDATE CASE]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
    <line>
      <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
    </line>
    <line>
      <![CDATA[Test Status: Pass]]>
    </line>
  </reporter-output>
  <suite name="regression testing" duration-ms="5788581" started-at="2018-11-26T13:22:22Z" finished-at="2018-11-26T14:58:51Z">
    <groups>
      <group name="spcase registration">
        <method signature="SPcasereg.TC_SCPR_004()[pri:5, instance:maintest.SPcasereg@7471b5]" name="TC_SCPR_004" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_001()[pri:2, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_001" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_002()[pri:3, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_002" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_003()[pri:4, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_003" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_005()[pri:6, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_005" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_006()[pri:7, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_006" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_007()[pri:8, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_007" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_008()[pri:9, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_008" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_009()[pri:10, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_009" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_010()[pri:11, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_010" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_011()[pri:12, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_011" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_022()[pri:23, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_022" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_023()[pri:24, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_023" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_024()[pri:25, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_024" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_025()[pri:26, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_025" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_026()[pri:27, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_026" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_027()[pri:28, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_027" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.login()[pri:1, instance:maintest.SPcasereg@7471b5]" name="login" class="maintest.SPcasereg"/>
      </group> <!-- spcase registration -->
      <group name="not applicable">
        <method signature="SPcasereg.TC_SPNAPP_001()[pri:58, instance:maintest.SPcasereg@7471b5]" name="TC_SPNAPP_001" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCEP_001()[pri:59, instance:maintest.SPcasereg@7471b5]" name="TC_SPCEP_001" class="maintest.SPcasereg"/>
      </group> <!-- not applicable -->
      <group name="insuff">
        <method signature="SPcasereg.TC_SPINF_001()[pri:29, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_001" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_002()[pri:30, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_002" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_003()[pri:31, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_003" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_004()[pri:32, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_004" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_005()[pri:33, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_005" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_006()[pri:34, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_006" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_007()[pri:35, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_007" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_008()[pri:36, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_008" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_009()[pri:37, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_009" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_010()[pri:38, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_010" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_011()[pri:39, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_011" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_014()[pri:40, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_014" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_017()[pri:41, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_017" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_020()[pri:42, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_020" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_023()[pri:43, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_023" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_026()[pri:44, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_026" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_029()[pri:45, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_029" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_032()[pri:46, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_032" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_035()[pri:47, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_035" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_038()[pri:48, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_038" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_012()[pri:49, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_012" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_015()[pri:50, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_015" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_018()[pri:51, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_018" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_021()[pri:52, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_021" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_024()[pri:57, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_024" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_027()[pri:54, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_027" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_030()[pri:56, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_030" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_033()[pri:55, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_033" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPINF_039()[pri:53, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_039" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.login()[pri:1, instance:maintest.SPcasereg@7471b5]" name="login" class="maintest.SPcasereg"/>
      </group> <!-- insuff -->
      <group name="smoketest">
        <method signature="SPcasereg.TC_SPCR_001()[pri:2, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_001" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_010()[pri:11, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_010" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_022()[pri:23, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_022" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_023()[pri:24, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_023" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_024()[pri:25, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_024" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_025()[pri:26, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_025" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_026()[pri:27, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_026" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.TC_SPCR_027()[pri:28, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_027" class="maintest.SPcasereg"/>
        <method signature="SPcasereg.login()[pri:1, instance:maintest.SPcasereg@7471b5]" name="login" class="maintest.SPcasereg"/>
      </group> <!-- smoketest -->
    </groups>
    <test name="ServiceProviderCaseRegistration" duration-ms="1422074" started-at="2018-11-26T13:22:22Z" finished-at="2018-11-26T13:46:04Z">
      <class name="maintest.SPcasereg">
        <test-method status="PASS" signature="beforetest()[pri:0, instance:maintest.SPcasereg@7471b5]" name="beforetest" is-config="true" duration-ms="6322" started-at="2018-11-26T13:22:22Z" finished-at="2018-11-26T13:22:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="10" started-at="2018-11-26T13:22:29Z" finished-at="2018-11-26T13:22:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.login() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="login()[pri:1, instance:maintest.SPcasereg@7471b5]" name="login" duration-ms="34300" started-at="2018-11-26T13:22:29Z" finished-at="2018-11-26T13:23:03Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:03Z" finished-at="2018-11-26T13:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=SPcasereg.login()[pri:1, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.login() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="TC_SPCR_001()[pri:2, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_001" duration-ms="3991" started-at="2018-11-26T13:23:03Z" finished-at="2018-11-26T13:23:07Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_001 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:03Z" finished-at="2018-11-26T13:23:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:07Z" finished-at="2018-11-26T13:23:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_001 status=SUCCESS method=SPcasereg.TC_SPCR_001()[pri:2, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:07Z" finished-at="2018-11-26T13:23:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_002()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_002()[pri:3, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_002" duration-ms="3766" started-at="2018-11-26T13:23:07Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_002 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_002 status=SUCCESS method=SPcasereg.TC_SPCR_002()[pri:3, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_002()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_003()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_003()[pri:4, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_003" duration-ms="55" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_003 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SCPR_004()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_003 status=SUCCESS method=SPcasereg.TC_SPCR_003()[pri:4, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_003()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="TC_SCPR_004()[pri:5, instance:maintest.SPcasereg@7471b5]" name="TC_SCPR_004" duration-ms="40" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SCPR_004 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SCPR_004 status=SUCCESS method=SPcasereg.TC_SCPR_004()[pri:5, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SCPR_004()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_005()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_005()[pri:6, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_005" duration-ms="40" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_005 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_005 status=SUCCESS method=SPcasereg.TC_SPCR_005()[pri:6, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_005()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_006()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_006()[pri:7, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_006" duration-ms="34" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_006 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_006 status=SUCCESS method=SPcasereg.TC_SPCR_006()[pri:7, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_006()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_007()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_007()[pri:8, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_007" duration-ms="35" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_007 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_007 status=SUCCESS method=SPcasereg.TC_SPCR_007()[pri:8, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_007()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_008()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_008()[pri:9, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_008" duration-ms="35" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_008 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_008 status=SUCCESS method=SPcasereg.TC_SPCR_008()[pri:9, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_008()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_009()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_009()[pri:10, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_009" duration-ms="34" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_009 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_009 status=SUCCESS method=SPcasereg.TC_SPCR_009()[pri:10, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_009()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:23:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_010() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_010()[pri:11, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_010" duration-ms="90301" started-at="2018-11-26T13:23:11Z" finished-at="2018-11-26T13:24:41Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_010 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:24:41Z" finished-at="2018-11-26T13:24:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_010 status=SUCCESS method=SPcasereg.TC_SPCR_010()[pri:11, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_010() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:24:41Z" finished-at="2018-11-26T13:24:41Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_011() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_011()[pri:12, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_011" duration-ms="92866" started-at="2018-11-26T13:24:41Z" finished-at="2018-11-26T13:26:14Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_011 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:26:14Z" finished-at="2018-11-26T13:26:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_011 status=SUCCESS method=SPcasereg.TC_SPCR_011()[pri:12, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_011() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:26:14Z" finished-at="2018-11-26T13:26:14Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_022() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="TC_SPCR_022()[pri:23, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_022" duration-ms="36030" started-at="2018-11-26T13:26:14Z" finished-at="2018-11-26T13:26:50Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at maintest.SPcasereg.TC_SPCR_022(SPcasereg.java:1008)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Failed]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_022 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="17788" started-at="2018-11-26T13:26:50Z" finished-at="2018-11-26T13:27:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_022 status=FAILURE method=SPcasereg.TC_SPCR_022()[pri:23, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_022() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:27:08Z" finished-at="2018-11-26T13:27:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_023() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_023()[pri:24, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_023" duration-ms="21521" started-at="2018-11-26T13:27:08Z" finished-at="2018-11-26T13:27:30Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_023 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:27:30Z" finished-at="2018-11-26T13:27:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_023 status=SUCCESS method=SPcasereg.TC_SPCR_023()[pri:24, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_023() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:27:30Z" finished-at="2018-11-26T13:27:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_024() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_024()[pri:25, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_024" duration-ms="10601" started-at="2018-11-26T13:27:30Z" finished-at="2018-11-26T13:27:40Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_024 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:27:40Z" finished-at="2018-11-26T13:27:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_024 status=SUCCESS method=SPcasereg.TC_SPCR_024()[pri:25, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_024() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:27:40Z" finished-at="2018-11-26T13:27:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_025() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_025()[pri:26, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_025" duration-ms="31784" started-at="2018-11-26T13:27:40Z" finished-at="2018-11-26T13:28:12Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_025 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="2" started-at="2018-11-26T13:28:12Z" finished-at="2018-11-26T13:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_025 status=SUCCESS method=SPcasereg.TC_SPCR_025()[pri:26, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_025() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:28:12Z" finished-at="2018-11-26T13:28:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_026() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_026()[pri:27, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_026" duration-ms="34201" started-at="2018-11-26T13:28:12Z" finished-at="2018-11-26T13:28:46Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_026 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:28:46Z" finished-at="2018-11-26T13:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_026 status=SUCCESS method=SPcasereg.TC_SPCR_026()[pri:27, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_026() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:28:46Z" finished-at="2018-11-26T13:28:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_027() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCR_027()[pri:28, instance:maintest.SPcasereg@7471b5]" name="TC_SPCR_027" duration-ms="30590" started-at="2018-11-26T13:28:46Z" finished-at="2018-11-26T13:29:17Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCR_027 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:29:17Z" finished-at="2018-11-26T13:29:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCR_027 status=SUCCESS method=SPcasereg.TC_SPCR_027()[pri:28, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCR_027() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:29:17Z" finished-at="2018-11-26T13:29:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_001()[pri:29, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_001" duration-ms="56495" started-at="2018-11-26T13:29:17Z" finished-at="2018-11-26T13:30:13Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_001 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:30:13Z" finished-at="2018-11-26T13:30:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_001 status=SUCCESS method=SPcasereg.TC_SPINF_001()[pri:29, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="TC_SPINF_002()[pri:30, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_002" duration-ms="110154" started-at="2018-11-26T13:30:13Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_001" finished-at="2018-11-26T13:32:03Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_002 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:30:13Z" finished-at="2018-11-26T13:30:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_002() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:32:03Z" finished-at="2018-11-26T13:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_002 status=SUCCESS method=SPcasereg.TC_SPINF_002()[pri:30, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_002() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:32:03Z" finished-at="2018-11-26T13:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_003() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_003()[pri:31, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_003" duration-ms="100" started-at="2018-11-26T13:32:03Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_001" finished-at="2018-11-26T13:32:03Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_003 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:32:03Z" finished-at="2018-11-26T13:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_003 status=SUCCESS method=SPcasereg.TC_SPINF_003()[pri:31, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_003() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:32:03Z" finished-at="2018-11-26T13:32:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_004() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_004()[pri:32, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_004" duration-ms="3644" started-at="2018-11-26T13:32:03Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_001" finished-at="2018-11-26T13:32:07Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_004 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:32:07Z" finished-at="2018-11-26T13:32:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_004 status=SUCCESS method=SPcasereg.TC_SPINF_004()[pri:32, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_004() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:32:07Z" finished-at="2018-11-26T13:32:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_005() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_005()[pri:33, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_005" duration-ms="36396" started-at="2018-11-26T13:32:07Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_001" finished-at="2018-11-26T13:32:44Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_005 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:32:44Z" finished-at="2018-11-26T13:32:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_005 status=SUCCESS method=SPcasereg.TC_SPINF_005()[pri:33, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_005() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:32:44Z" finished-at="2018-11-26T13:32:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_006() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_006()[pri:34, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_006" duration-ms="44044" started-at="2018-11-26T13:32:44Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_005" finished-at="2018-11-26T13:33:28Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_006 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:33:28Z" finished-at="2018-11-26T13:33:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_006 status=SUCCESS method=SPcasereg.TC_SPINF_006()[pri:34, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_006() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:33:28Z" finished-at="2018-11-26T13:33:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_007() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_007()[pri:35, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_007" duration-ms="43340" started-at="2018-11-26T13:33:28Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_006" finished-at="2018-11-26T13:34:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_007 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:34:11Z" finished-at="2018-11-26T13:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_007 status=SUCCESS method=SPcasereg.TC_SPINF_007()[pri:35, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_007() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:34:11Z" finished-at="2018-11-26T13:34:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_008() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_008()[pri:36, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_008" duration-ms="10534" started-at="2018-11-26T13:34:11Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_006" finished-at="2018-11-26T13:34:21Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_008 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:34:21Z" finished-at="2018-11-26T13:34:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_008 status=SUCCESS method=SPcasereg.TC_SPINF_008()[pri:36, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_008() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:34:21Z" finished-at="2018-11-26T13:34:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_009() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_009()[pri:37, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_009" duration-ms="3640" started-at="2018-11-26T13:34:21Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_006" finished-at="2018-11-26T13:34:25Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_009 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:34:25Z" finished-at="2018-11-26T13:34:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_009 status=SUCCESS method=SPcasereg.TC_SPINF_009()[pri:37, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_009() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:34:25Z" finished-at="2018-11-26T13:34:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_010() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_010()[pri:38, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_010" duration-ms="35871" started-at="2018-11-26T13:34:25Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_006" finished-at="2018-11-26T13:35:01Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_010 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:35:01Z" finished-at="2018-11-26T13:35:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_010 status=SUCCESS method=SPcasereg.TC_SPINF_010()[pri:38, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_010() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:35:01Z" finished-at="2018-11-26T13:35:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_011() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_011()[pri:39, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_011" duration-ms="54654" started-at="2018-11-26T13:35:01Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_010" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_011 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_011 status=SUCCESS method=SPcasereg.TC_SPINF_011()[pri:39, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_011() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_014() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_014()[pri:40, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_014" duration-ms="53" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_014 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_014 status=SUCCESS method=SPcasereg.TC_SPINF_014()[pri:40, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_014() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_017() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_017()[pri:41, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_017" duration-ms="43" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_017 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_017 status=SUCCESS method=SPcasereg.TC_SPINF_017()[pri:41, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_017() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_020() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_020()[pri:42, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_020" duration-ms="47" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_020 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_020 status=SUCCESS method=SPcasereg.TC_SPINF_020()[pri:42, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_020() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_023() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_023()[pri:43, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_023" duration-ms="57" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_023 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_023 status=SUCCESS method=SPcasereg.TC_SPINF_023()[pri:43, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_023() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_026() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_026()[pri:44, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_026" duration-ms="55" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_026 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_026 status=SUCCESS method=SPcasereg.TC_SPINF_026()[pri:44, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_026() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_029() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_029()[pri:45, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_029" duration-ms="61" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_029 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_029 status=SUCCESS method=SPcasereg.TC_SPINF_029()[pri:45, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_029() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_032() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_032()[pri:46, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_032" duration-ms="49" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_032 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_032 status=SUCCESS method=SPcasereg.TC_SPINF_032()[pri:46, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_032() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="TC_SPINF_035()[pri:47, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_035" duration-ms="48" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_035 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_035() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_035 status=SUCCESS method=SPcasereg.TC_SPINF_035()[pri:47, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_035() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:56Z" finished-at="2018-11-26T13:35:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_038() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_038()[pri:48, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_038" duration-ms="1106" started-at="2018-11-26T13:35:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_011" finished-at="2018-11-26T13:35:57Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_038 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:35:57Z" finished-at="2018-11-26T13:35:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_038 status=SUCCESS method=SPcasereg.TC_SPINF_038()[pri:48, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_038() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:35:57Z" finished-at="2018-11-26T13:35:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_012() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_012()[pri:49, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_012" duration-ms="224673" started-at="2018-11-26T13:35:57Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_038" finished-at="2018-11-26T13:39:42Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_012 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:39:42Z" finished-at="2018-11-26T13:39:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_012 status=SUCCESS method=SPcasereg.TC_SPINF_012()[pri:49, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_012() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="TC_SPINF_015()[pri:50, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_015" duration-ms="7536" started-at="2018-11-26T13:39:42Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:39:49Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_015 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:39:42Z" finished-at="2018-11-26T13:39:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_015() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:39:49Z" finished-at="2018-11-26T13:39:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_015 status=SUCCESS method=SPcasereg.TC_SPINF_015()[pri:50, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_015() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:39:49Z" finished-at="2018-11-26T13:39:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_018() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_018()[pri:51, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_018" duration-ms="6442" started-at="2018-11-26T13:39:49Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:39:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_018 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:39:56Z" finished-at="2018-11-26T13:39:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_018 status=SUCCESS method=SPcasereg.TC_SPINF_018()[pri:51, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_018() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="TC_SPINF_021()[pri:52, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_021" duration-ms="5630" started-at="2018-11-26T13:39:56Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:40:01Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_021 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:39:56Z" finished-at="2018-11-26T13:39:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_021() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:01Z" finished-at="2018-11-26T13:40:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_021 status=SUCCESS method=SPcasereg.TC_SPINF_021()[pri:52, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_021() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="TC_SPINF_039()[pri:53, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_039" duration-ms="6161" started-at="2018-11-26T13:40:01Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:40:08Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_039 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:40:01Z" finished-at="2018-11-26T13:40:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_039() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:08Z" finished-at="2018-11-26T13:40:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_039 status=SUCCESS method=SPcasereg.TC_SPINF_039()[pri:53, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_039() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:40:08Z" finished-at="2018-11-26T13:40:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_027() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_027()[pri:54, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_027" duration-ms="5212" started-at="2018-11-26T13:40:08Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:40:13Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_027 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:13Z" finished-at="2018-11-26T13:40:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_027 status=SUCCESS method=SPcasereg.TC_SPINF_027()[pri:54, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_027() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:13Z" finished-at="2018-11-26T13:40:13Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_033() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_033()[pri:55, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_033" duration-ms="5746" started-at="2018-11-26T13:40:13Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:40:19Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_033 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:19Z" finished-at="2018-11-26T13:40:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_033 status=SUCCESS method=SPcasereg.TC_SPINF_033()[pri:55, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_033() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:19Z" finished-at="2018-11-26T13:40:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_030() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_030()[pri:56, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_030" duration-ms="5168" started-at="2018-11-26T13:40:19Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:40:24Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_030 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:24Z" finished-at="2018-11-26T13:40:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_030 status=SUCCESS method=SPcasereg.TC_SPINF_030()[pri:56, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_030() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:24Z" finished-at="2018-11-26T13:40:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_024() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPINF_024()[pri:57, instance:maintest.SPcasereg@7471b5]" name="TC_SPINF_024" duration-ms="15220" started-at="2018-11-26T13:40:24Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_012" finished-at="2018-11-26T13:40:39Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPINF_024 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:40:39Z" finished-at="2018-11-26T13:40:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPINF_024 status=SUCCESS method=SPcasereg.TC_SPINF_024()[pri:57, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPINF_024() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:40:39Z" finished-at="2018-11-26T13:40:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPNAPP_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPNAPP_001()[pri:58, instance:maintest.SPcasereg@7471b5]" name="TC_SPNAPP_001" duration-ms="69487" started-at="2018-11-26T13:40:39Z" depends-on-methods="maintest.SPcasereg.TC_SPINF_024" finished-at="2018-11-26T13:41:48Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPNAPP_001 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="3" started-at="2018-11-26T13:41:48Z" finished-at="2018-11-26T13:41:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPNAPP_001 status=SUCCESS method=SPcasereg.TC_SPNAPP_001()[pri:58, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPNAPP_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="2" started-at="2018-11-26T13:41:48Z" finished-at="2018-11-26T13:41:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCEP_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCEP_001()[pri:59, instance:maintest.SPcasereg@7471b5]" name="TC_SPCEP_001" duration-ms="54164" started-at="2018-11-26T13:41:48Z" depends-on-methods="maintest.SPcasereg.TC_SPNAPP_001" finished-at="2018-11-26T13:42:43Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCEP_001 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:42:43Z" finished-at="2018-11-26T13:42:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCEP_001 status=SUCCESS method=SPcasereg.TC_SPCEP_001()[pri:59, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCEP_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:42:43Z" finished-at="2018-11-26T13:42:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCEP_002() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPCEP_002()[pri:60, instance:maintest.SPcasereg@7471b5]" name="TC_SPCEP_002" duration-ms="17689" started-at="2018-11-26T13:42:43Z" depends-on-methods="maintest.SPcasereg.TC_SPCEP_001" finished-at="2018-11-26T13:43:00Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCEP_002 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:43:00Z" finished-at="2018-11-26T13:43:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCEP_002 status=SUCCESS method=SPcasereg.TC_SPCEP_002()[pri:60, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCEP_002() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:43:00Z" finished-at="2018-11-26T13:43:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCEP_003() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="TC_SPCEP_003()[pri:61, instance:maintest.SPcasereg@7471b5]" name="TC_SPCEP_003" duration-ms="3061" started-at="2018-11-26T13:43:00Z" depends-on-methods="maintest.SPcasereg.TC_SPCEP_002" finished-at="2018-11-26T13:43:03Z">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"id","selector":"(//td[text()='HDFC000909'])[2]"}
  (Session info: headless chrome=70.0.3538.102)
  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 6.1.7601 SP1 x86) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'KAD-I-032', ip: '192.168.2.67', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.42.591088 (7b2b2dca23cca0..., userDataDir: C:\Users\admin\AppData\Loca...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:52089}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 70.0.3538.102, webStorageEnabled: true}
Session ID: a84ae4165dec981b65ebbc478995b196
*** Element info: {Using=id, value=(//td[text()='HDFC000909'])[2]}]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"id","selector":"(//td[text()='HDFC000909'])[2]"}
  (Session info: headless chrome=70.0.3538.102)
  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 6.1.7601 SP1 x86) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
For documentation on this error, please visit: http://seleniumhq.org/exceptions/no_such_element.html
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'KAD-I-032', ip: '192.168.2.67', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.42.591088 (7b2b2dca23cca0..., userDataDir: C:\Users\admin\AppData\Loca...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:52089}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 70.0.3538.102, webStorageEnabled: true}
Session ID: a84ae4165dec981b65ebbc478995b196
*** Element info: {Using=id, value=(//td[text()='HDFC000909'])[2]}
at sun.reflect.GeneratedConstructorAccessor20.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:322)
at org.openqa.selenium.remote.RemoteWebDriver.findElementById(RemoteWebDriver.java:368)
at org.openqa.selenium.By$ById.findElement(By.java:188)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:314)
at environment.Utill.find(Utill.java:140)
at environment.Utill.click(Utill.java:243)
at actions.CEP.upload(CEP.java:132)
at maintest.SPcasereg.TC_SPCEP_003(SPcasereg.java:1952)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Failed]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCEP_003 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="14579" started-at="2018-11-26T13:43:03Z" finished-at="2018-11-26T13:43:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPCEP_003 status=FAILURE method=SPcasereg.TC_SPCEP_003()[pri:61, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPCEP_003() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="SKIP" signature="TC_SPCEP_004()[pri:62, instance:maintest.SPcasereg@7471b5]" name="TC_SPCEP_004" duration-ms="0" started-at="2018-11-26T13:43:18Z" depends-on-methods="maintest.SPcasereg.TC_SPCEP_003" finished-at="2018-11-26T13:43:18Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method SPcasereg.TC_SPCEP_004()[pri:62, instance:maintest.SPcasereg@7471b5] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method SPcasereg.TC_SPCEP_004()[pri:62, instance:maintest.SPcasereg@7471b5] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPCEP_004 -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="2" started-at="2018-11-26T13:43:18Z" finished-at="2018-11-26T13:43:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPDOC_001()[pri:63, instance:maintest.SPcasereg@7471b5]" name="TC_SPDOC_001" duration-ms="42015" started-at="2018-11-26T13:43:18Z" depends-on-methods="maintest.SPcasereg.TC_SPCEP_003" finished-at="2018-11-26T13:44:00Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPDOC_001 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:44:00Z" finished-at="2018-11-26T13:44:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPDOC_001 status=SUCCESS method=SPcasereg.TC_SPDOC_001()[pri:63, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_001() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:44:00Z" finished-at="2018-11-26T13:44:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_002() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPDOC_002()[pri:64, instance:maintest.SPcasereg@7471b5]" name="TC_SPDOC_002" duration-ms="11421" started-at="2018-11-26T13:44:00Z" depends-on-methods="maintest.SPcasereg.TC_SPDOC_001" finished-at="2018-11-26T13:44:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPDOC_002 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:44:11Z" finished-at="2018-11-26T13:44:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPDOC_002 status=SUCCESS method=SPcasereg.TC_SPDOC_002()[pri:64, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_002() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:44:11Z" finished-at="2018-11-26T13:44:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_003() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPDOC_003()[pri:65, instance:maintest.SPcasereg@7471b5]" name="TC_SPDOC_003" duration-ms="11442" started-at="2018-11-26T13:44:11Z" depends-on-methods="maintest.SPcasereg.TC_SPDOC_002" finished-at="2018-11-26T13:44:23Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPDOC_003 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:44:23Z" finished-at="2018-11-26T13:44:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPDOC_003 status=SUCCESS method=SPcasereg.TC_SPDOC_003()[pri:65, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_003() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:44:23Z" finished-at="2018-11-26T13:44:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_004() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPDOC_004()[pri:66, instance:maintest.SPcasereg@7471b5]" name="TC_SPDOC_004" duration-ms="28350" started-at="2018-11-26T13:44:23Z" depends-on-methods="maintest.SPcasereg.TC_SPDOC_003" finished-at="2018-11-26T13:44:51Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPDOC_004 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:44:51Z" finished-at="2018-11-26T13:44:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPDOC_004 status=SUCCESS method=SPcasereg.TC_SPDOC_004()[pri:66, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_004() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:44:51Z" finished-at="2018-11-26T13:44:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_005() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPDOC_005()[pri:67, instance:maintest.SPcasereg@7471b5]" name="TC_SPDOC_005" duration-ms="65136" started-at="2018-11-26T13:44:51Z" depends-on-methods="maintest.SPcasereg.TC_SPDOC_004" finished-at="2018-11-26T13:45:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPDOC_005 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:45:56Z" finished-at="2018-11-26T13:45:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPDOC_005 status=SUCCESS method=SPcasereg.TC_SPDOC_005()[pri:67, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_005() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="setup" is-config="true" duration-ms="2" started-at="2018-11-26T13:45:56Z" finished-at="2018-11-26T13:45:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_006() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="TC_SPDOC_006()[pri:68, instance:maintest.SPcasereg@7471b5]" name="TC_SPDOC_006" duration-ms="7438" started-at="2018-11-26T13:45:56Z" depends-on-methods="maintest.SPcasereg.TC_SPDOC_005" finished-at="2018-11-26T13:46:04Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.SPcasereg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- TC_SPDOC_006 -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.SPcasereg@7471b5]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:46:04Z" finished-at="2018-11-26T13:46:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=TC_SPDOC_006 status=SUCCESS method=SPcasereg.TC_SPDOC_006()[pri:68, instance:maintest.SPcasereg@7471b5] output=Test Method resides in maintest.SPcasereg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.SPcasereg.TC_SPDOC_006() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:maintest.SPcasereg@7471b5]" name="teardown" is-config="true" duration-ms="555" started-at="2018-11-26T13:46:04Z" finished-at="2018-11-26T13:46:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- maintest.SPcasereg -->
    </test> <!-- ServiceProviderCaseRegistration -->
    <test name="FullFlow" duration-ms="2802619" started-at="2018-11-26T13:46:04Z" finished-at="2018-11-26T14:32:47Z">
      <class name="maintest.FullFlow">
        <test-method status="PASS" signature="beforetest()[pri:0, instance:maintest.FullFlow@e6e9c3]" name="beforetest" is-config="true" duration-ms="3880" started-at="2018-11-26T13:46:04Z" finished-at="2018-11-26T13:46:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method status="PASS" signature="login()[pri:1, instance:maintest.FullFlow@e6e9c3]" name="login" duration-ms="10001" started-at="2018-11-26T13:46:08Z" finished-at="2018-11-26T13:46:18Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:46:08Z" finished-at="2018-11-26T13:46:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.login() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:46:18Z" finished-at="2018-11-26T13:46:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=FullFlow.login()[pri:1, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.login() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:46:18Z" finished-at="2018-11-26T13:46:18Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.caseregistration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="caseregistration()[pri:2, instance:maintest.FullFlow@e6e9c3]" name="caseregistration" duration-ms="38536" started-at="2018-11-26T13:46:18Z" depends-on-methods="maintest.FullFlow.login" finished-at="2018-11-26T13:46:57Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- caseregistration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:46:57Z" finished-at="2018-11-26T13:46:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=caseregistration status=SUCCESS method=FullFlow.caseregistration()[pri:2, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.caseregistration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:46:57Z" finished-at="2018-11-26T13:46:57Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.dataEntryAssign() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="dataEntryAssign()[pri:3, instance:maintest.FullFlow@e6e9c3]" name="dataEntryAssign" duration-ms="47207" started-at="2018-11-26T13:46:57Z" depends-on-methods="maintest.FullFlow.caseregistration" finished-at="2018-11-26T13:47:44Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- dataEntryAssign -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:47:44Z" finished-at="2018-11-26T13:47:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=dataEntryAssign status=SUCCESS method=FullFlow.dataEntryAssign()[pri:3, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.dataEntryAssign() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:47:44Z" finished-at="2018-11-26T13:47:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.dataEntry() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="dataEntry()[pri:4, instance:maintest.FullFlow@e6e9c3]" name="dataEntry" duration-ms="452799" started-at="2018-11-26T13:47:44Z" depends-on-methods="maintest.FullFlow.dataEntryAssign" finished-at="2018-11-26T13:55:17Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- dataEntry -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:55:17Z" finished-at="2018-11-26T13:55:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=dataEntry status=SUCCESS method=FullFlow.dataEntry()[pri:4, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.dataEntry() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:55:17Z" finished-at="2018-11-26T13:55:17Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.dataEntryQCAssign() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="dataEntryQCAssign()[pri:5, instance:maintest.FullFlow@e6e9c3]" name="dataEntryQCAssign" duration-ms="42674" started-at="2018-11-26T13:55:17Z" depends-on-methods="maintest.FullFlow.dataEntry" finished-at="2018-11-26T13:56:00Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- dataEntryQCAssign -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:56:00Z" finished-at="2018-11-26T13:56:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=dataEntryQCAssign status=SUCCESS method=FullFlow.dataEntryQCAssign()[pri:5, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.dataEntryQCAssign() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:56:00Z" finished-at="2018-11-26T13:56:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.AddressDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="AddressDEQC()[pri:6, instance:maintest.FullFlow@e6e9c3]" name="AddressDEQC" duration-ms="33539" started-at="2018-11-26T13:56:00Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:56:33Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- AddressDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:56:33Z" finished-at="2018-11-26T13:56:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddressDEQC status=SUCCESS method=FullFlow.AddressDEQC()[pri:6, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.AddressDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:56:33Z" finished-at="2018-11-26T13:56:33Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.EducationDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EducationDEQC()[pri:7, instance:maintest.FullFlow@e6e9c3]" name="EducationDEQC" duration-ms="27534" started-at="2018-11-26T13:56:33Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:57:01Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EducationDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:57:01Z" finished-at="2018-11-26T13:57:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EducationDEQC status=SUCCESS method=FullFlow.EducationDEQC()[pri:7, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.EducationDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:57:01Z" finished-at="2018-11-26T13:57:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.EmploymentDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EmploymentDEQC()[pri:8, instance:maintest.FullFlow@e6e9c3]" name="EmploymentDEQC" duration-ms="26750" started-at="2018-11-26T13:57:01Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:57:27Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EmploymentDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:57:27Z" finished-at="2018-11-26T13:57:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EmploymentDEQC status=SUCCESS method=FullFlow.EmploymentDEQC()[pri:8, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.EmploymentDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:57:27Z" finished-at="2018-11-26T13:57:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.ReferenceDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReferenceDEQC()[pri:9, instance:maintest.FullFlow@e6e9c3]" name="ReferenceDEQC" duration-ms="13033" started-at="2018-11-26T13:57:27Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:57:40Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReferenceDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:57:40Z" finished-at="2018-11-26T13:57:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReferenceDEQC status=SUCCESS method=FullFlow.ReferenceDEQC()[pri:9, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.ReferenceDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="DataBaseDEQC()[pri:10, instance:maintest.FullFlow@e6e9c3]" name="DataBaseDEQC" duration-ms="12672" started-at="2018-11-26T13:57:40Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:57:53Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- DataBaseDEQC -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:57:40Z" finished-at="2018-11-26T13:57:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.DataBaseDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:57:53Z" finished-at="2018-11-26T13:57:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DataBaseDEQC status=SUCCESS method=FullFlow.DataBaseDEQC()[pri:10, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.DataBaseDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:57:53Z" finished-at="2018-11-26T13:57:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CriminalDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CriminalDEQC()[pri:11, instance:maintest.FullFlow@e6e9c3]" name="CriminalDEQC" duration-ms="30860" started-at="2018-11-26T13:57:53Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:58:24Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CriminalDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:58:24Z" finished-at="2018-11-26T13:58:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CriminalDEQC status=SUCCESS method=FullFlow.CriminalDEQC()[pri:11, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CriminalDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T13:58:24Z" finished-at="2018-11-26T13:58:24Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CreditDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CreditDEQC()[pri:12, instance:maintest.FullFlow@e6e9c3]" name="CreditDEQC" duration-ms="11577" started-at="2018-11-26T13:58:24Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:58:36Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CreditDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T13:58:36Z" finished-at="2018-11-26T13:58:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreditDEQC status=SUCCESS method=FullFlow.CreditDEQC()[pri:12, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CreditDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:58:36Z" finished-at="2018-11-26T13:58:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CourtDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CourtDEQC()[pri:13, instance:maintest.FullFlow@e6e9c3]" name="CourtDEQC" duration-ms="30129" started-at="2018-11-26T13:58:36Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:59:06Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CourtDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:59:06Z" finished-at="2018-11-26T13:59:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CourtDEQC status=SUCCESS method=FullFlow.CourtDEQC()[pri:13, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CourtDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:59:06Z" finished-at="2018-11-26T13:59:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.IdDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="IdDEQC()[pri:14, instance:maintest.FullFlow@e6e9c3]" name="IdDEQC" duration-ms="26786" started-at="2018-11-26T13:59:06Z" depends-on-methods="maintest.FullFlow.dataEntryQCAssign" finished-at="2018-11-26T13:59:32Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- IdDEQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T13:59:32Z" finished-at="2018-11-26T13:59:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=IdDEQC status=SUCCESS method=FullFlow.IdDEQC()[pri:14, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.IdDEQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T13:59:32Z" finished-at="2018-11-26T13:59:32Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.VerificationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="VerificationSupervisor()[pri:15, instance:maintest.FullFlow@e6e9c3]" name="VerificationSupervisor" duration-ms="32668" started-at="2018-11-26T13:59:32Z" depends-on-methods="maintest.FullFlow.IdDEQC" finished-at="2018-11-26T14:00:05Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- VerificationSupervisor -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:00:05Z" finished-at="2018-11-26T14:00:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerificationSupervisor status=SUCCESS method=FullFlow.VerificationSupervisor()[pri:15, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.VerificationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="2" started-at="2018-11-26T14:00:05Z" finished-at="2018-11-26T14:00:05Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.VerificationIntiation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="VerificationIntiation()[pri:16, instance:maintest.FullFlow@e6e9c3]" name="VerificationIntiation" duration-ms="503009" started-at="2018-11-26T14:00:05Z" depends-on-methods="maintest.FullFlow.VerificationSupervisor" finished-at="2018-11-26T14:08:28Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- VerificationIntiation -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="2" started-at="2018-11-26T14:08:28Z" finished-at="2018-11-26T14:08:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerificationIntiation status=SUCCESS method=FullFlow.VerificationIntiation()[pri:16, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.VerificationIntiation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:08:28Z" finished-at="2018-11-26T14:08:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.AddressVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="AddressVerification()[pri:17, instance:maintest.FullFlow@e6e9c3]" name="AddressVerification" duration-ms="146683" started-at="2018-11-26T14:08:28Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:10:55Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- AddressVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:10:55Z" finished-at="2018-11-26T14:10:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddressVerification status=SUCCESS method=FullFlow.AddressVerification()[pri:17, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.AddressVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:10:55Z" finished-at="2018-11-26T14:10:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.EducationVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EducationVerification()[pri:18, instance:maintest.FullFlow@e6e9c3]" name="EducationVerification" duration-ms="105619" started-at="2018-11-26T14:10:55Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:12:40Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EducationVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:12:40Z" finished-at="2018-11-26T14:12:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EducationVerification status=SUCCESS method=FullFlow.EducationVerification()[pri:18, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.EducationVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:12:40Z" finished-at="2018-11-26T14:12:40Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.EmploymentVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EmploymentVerification()[pri:19, instance:maintest.FullFlow@e6e9c3]" name="EmploymentVerification" duration-ms="99147" started-at="2018-11-26T14:12:40Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:14:20Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EmploymentVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:14:20Z" finished-at="2018-11-26T14:14:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EmploymentVerification status=SUCCESS method=FullFlow.EmploymentVerification()[pri:19, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.EmploymentVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:14:20Z" finished-at="2018-11-26T14:14:20Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.ReferenceVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReferenceVerification()[pri:20, instance:maintest.FullFlow@e6e9c3]" name="ReferenceVerification" duration-ms="51958" started-at="2018-11-26T14:14:20Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:15:12Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReferenceVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:15:12Z" finished-at="2018-11-26T14:15:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReferenceVerification status=SUCCESS method=FullFlow.ReferenceVerification()[pri:20, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.ReferenceVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:15:12Z" finished-at="2018-11-26T14:15:12Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.DatabaseVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="DatabaseVerification()[pri:21, instance:maintest.FullFlow@e6e9c3]" name="DatabaseVerification" duration-ms="67549" started-at="2018-11-26T14:15:12Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:16:19Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- DatabaseVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:16:19Z" finished-at="2018-11-26T14:16:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DatabaseVerification status=SUCCESS method=FullFlow.DatabaseVerification()[pri:21, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.DatabaseVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:16:19Z" finished-at="2018-11-26T14:16:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CriminalVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CriminalVerification()[pri:22, instance:maintest.FullFlow@e6e9c3]" name="CriminalVerification" duration-ms="94857" started-at="2018-11-26T14:16:19Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:17:54Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CriminalVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:17:54Z" finished-at="2018-11-26T14:17:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CriminalVerification status=SUCCESS method=FullFlow.CriminalVerification()[pri:22, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CriminalVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:17:54Z" finished-at="2018-11-26T14:17:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CreditVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CreditVerification()[pri:23, instance:maintest.FullFlow@e6e9c3]" name="CreditVerification" duration-ms="51611" started-at="2018-11-26T14:17:54Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:18:46Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CreditVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:18:46Z" finished-at="2018-11-26T14:18:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreditVerification status=SUCCESS method=FullFlow.CreditVerification()[pri:23, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CreditVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:18:46Z" finished-at="2018-11-26T14:18:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CourtVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CourtVerification()[pri:24, instance:maintest.FullFlow@e6e9c3]" name="CourtVerification" duration-ms="102781" started-at="2018-11-26T14:18:46Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:20:28Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CourtVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:20:28Z" finished-at="2018-11-26T14:20:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CourtVerification status=SUCCESS method=FullFlow.CourtVerification()[pri:24, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CourtVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:20:28Z" finished-at="2018-11-26T14:20:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.IDVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="IDVerification()[pri:25, instance:maintest.FullFlow@e6e9c3]" name="IDVerification" duration-ms="86466" started-at="2018-11-26T14:20:28Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:21:55Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- IDVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:21:55Z" finished-at="2018-11-26T14:21:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=IDVerification status=SUCCESS method=FullFlow.IDVerification()[pri:25, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.IDVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:21:55Z" finished-at="2018-11-26T14:21:55Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.DrugVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="DrugVerification()[pri:26, instance:maintest.FullFlow@e6e9c3]" name="DrugVerification" duration-ms="63474" started-at="2018-11-26T14:21:55Z" depends-on-methods="maintest.FullFlow.VerificationIntiation" finished-at="2018-11-26T14:22:58Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- DrugVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:22:58Z" finished-at="2018-11-26T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DrugVerification status=SUCCESS method=FullFlow.DrugVerification()[pri:26, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.DrugVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:22:58Z" finished-at="2018-11-26T14:22:58Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportGenerationSupervision() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReportGenerationSupervision()[pri:27, instance:maintest.FullFlow@e6e9c3]" name="ReportGenerationSupervision" duration-ms="72189" started-at="2018-11-26T14:22:58Z" depends-on-methods="maintest.FullFlow.DrugVerification" finished-at="2018-11-26T14:24:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportGenerationSupervision -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="3" started-at="2018-11-26T14:24:11Z" finished-at="2018-11-26T14:24:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportGenerationSupervision status=SUCCESS method=FullFlow.ReportGenerationSupervision()[pri:27, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportGenerationSupervision() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="2" started-at="2018-11-26T14:24:11Z" finished-at="2018-11-26T14:24:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.AddressReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="AddressReportGeneration()[pri:28, instance:maintest.FullFlow@e6e9c3]" name="AddressReportGeneration" duration-ms="84417" started-at="2018-11-26T14:24:11Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:25:35Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- AddressReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:25:35Z" finished-at="2018-11-26T14:25:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddressReportGeneration status=SUCCESS method=FullFlow.AddressReportGeneration()[pri:28, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.AddressReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:25:35Z" finished-at="2018-11-26T14:25:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.EducationReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EducationReportGeneration()[pri:29, instance:maintest.FullFlow@e6e9c3]" name="EducationReportGeneration" duration-ms="59628" started-at="2018-11-26T14:25:35Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:26:35Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EducationReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:26:35Z" finished-at="2018-11-26T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EducationReportGeneration status=SUCCESS method=FullFlow.EducationReportGeneration()[pri:29, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.EducationReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:26:35Z" finished-at="2018-11-26T14:26:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.EmploymentReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EmploymentReportGeneration()[pri:30, instance:maintest.FullFlow@e6e9c3]" name="EmploymentReportGeneration" duration-ms="76248" started-at="2018-11-26T14:26:35Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:27:51Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EmploymentReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:27:51Z" finished-at="2018-11-26T14:27:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EmploymentReportGeneration status=SUCCESS method=FullFlow.EmploymentReportGeneration()[pri:30, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.EmploymentReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:27:51Z" finished-at="2018-11-26T14:27:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.ReferenceReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReferenceReportGeneration()[pri:31, instance:maintest.FullFlow@e6e9c3]" name="ReferenceReportGeneration" duration-ms="9935" started-at="2018-11-26T14:27:51Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:28:01Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReferenceReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:28:01Z" finished-at="2018-11-26T14:28:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReferenceReportGeneration status=SUCCESS method=FullFlow.ReferenceReportGeneration()[pri:31, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.ReferenceReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:28:01Z" finished-at="2018-11-26T14:28:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.DatabaseReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="DatabaseReportGeneration()[pri:32, instance:maintest.FullFlow@e6e9c3]" name="DatabaseReportGeneration" duration-ms="1789" started-at="2018-11-26T14:28:01Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:28:03Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- DatabaseReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:28:03Z" finished-at="2018-11-26T14:28:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DatabaseReportGeneration status=SUCCESS method=FullFlow.DatabaseReportGeneration()[pri:32, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.DatabaseReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:28:03Z" finished-at="2018-11-26T14:28:03Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CriminalReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CriminalReportGeneration()[pri:33, instance:maintest.FullFlow@e6e9c3]" name="CriminalReportGeneration" duration-ms="45195" started-at="2018-11-26T14:28:03Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:28:48Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CriminalReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:28:48Z" finished-at="2018-11-26T14:28:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CriminalReportGeneration status=SUCCESS method=FullFlow.CriminalReportGeneration()[pri:33, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CriminalReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:28:48Z" finished-at="2018-11-26T14:28:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CreditReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CreditReportGeneration()[pri:34, instance:maintest.FullFlow@e6e9c3]" name="CreditReportGeneration" duration-ms="19018" started-at="2018-11-26T14:28:48Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:29:07Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CreditReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:29:07Z" finished-at="2018-11-26T14:29:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CreditReportGeneration status=SUCCESS method=FullFlow.CreditReportGeneration()[pri:34, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CreditReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:29:07Z" finished-at="2018-11-26T14:29:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.CourtReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="CourtReportGeneration()[pri:35, instance:maintest.FullFlow@e6e9c3]" name="CourtReportGeneration" duration-ms="45838" started-at="2018-11-26T14:29:07Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:29:53Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CourtReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:29:53Z" finished-at="2018-11-26T14:29:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CourtReportGeneration status=SUCCESS method=FullFlow.CourtReportGeneration()[pri:35, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.CourtReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:29:53Z" finished-at="2018-11-26T14:29:53Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.DrugReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="DrugReportGeneration()[pri:36, instance:maintest.FullFlow@e6e9c3]" name="DrugReportGeneration" duration-ms="8171" started-at="2018-11-26T14:29:53Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:30:01Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- DrugReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:30:01Z" finished-at="2018-11-26T14:30:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DrugReportGeneration status=SUCCESS method=FullFlow.DrugReportGeneration()[pri:36, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.DrugReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:30:01Z" finished-at="2018-11-26T14:30:01Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.IdReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="IdReportGeneration()[pri:37, instance:maintest.FullFlow@e6e9c3]" name="IdReportGeneration" duration-ms="37416" started-at="2018-11-26T14:30:01Z" depends-on-methods="maintest.FullFlow.ReportGenerationSupervision" finished-at="2018-11-26T14:30:38Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- IdReportGeneration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:30:38Z" finished-at="2018-11-26T14:30:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=IdReportGeneration status=SUCCESS method=FullFlow.IdReportGeneration()[pri:37, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.IdReportGeneration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:30:38Z" finished-at="2018-11-26T14:30:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportGenerationSubmit() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReportGenerationSubmit()[pri:38, instance:maintest.FullFlow@e6e9c3]" name="ReportGenerationSubmit" duration-ms="33071" started-at="2018-11-26T14:30:38Z" depends-on-methods="maintest.FullFlow.IdReportGeneration" finished-at="2018-11-26T14:31:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportGenerationSubmit -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="2" started-at="2018-11-26T14:31:11Z" finished-at="2018-11-26T14:31:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportGenerationSubmit status=SUCCESS method=FullFlow.ReportGenerationSubmit()[pri:38, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportGenerationSubmit() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:31:11Z" finished-at="2018-11-26T14:31:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportValidationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReportValidationSupervisor()[pri:38, instance:maintest.FullFlow@e6e9c3]" name="ReportValidationSupervisor" duration-ms="38034" started-at="2018-11-26T14:31:11Z" depends-on-methods="maintest.FullFlow.ReportGenerationSubmit" finished-at="2018-11-26T14:31:49Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportValidationSupervisor -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:31:49Z" finished-at="2018-11-26T14:31:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportValidationSupervisor status=SUCCESS method=FullFlow.ReportValidationSupervisor()[pri:38, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportValidationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:31:49Z" finished-at="2018-11-26T14:31:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportValidation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReportValidation()[pri:40, instance:maintest.FullFlow@e6e9c3]" name="ReportValidation" duration-ms="57062" started-at="2018-11-26T14:31:49Z" depends-on-methods="maintest.FullFlow.ReportValidationSupervisor" finished-at="2018-11-26T14:32:46Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.FullFlow]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportValidation -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.FullFlow@e6e9c3]" name="tearDown" is-config="true" duration-ms="2" started-at="2018-11-26T14:32:46Z" finished-at="2018-11-26T14:32:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportValidation status=SUCCESS method=FullFlow.ReportValidation()[pri:40, instance:maintest.FullFlow@e6e9c3] output=Test Method resides in maintest.FullFlow]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.FullFlow.ReportValidation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:maintest.FullFlow@e6e9c3]" name="teardown" is-config="true" duration-ms="665" started-at="2018-11-26T14:32:46Z" finished-at="2018-11-26T14:32:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- maintest.FullFlow -->
    </test> <!-- FullFlow -->
    <test name="CLIENT CASE" duration-ms="454961" started-at="2018-11-26T14:32:47Z" finished-at="2018-11-26T14:40:22Z">
      <class name="maintest.ClientCaseReg">
        <test-method status="PASS" signature="beforetest()[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="beforetest" is-config="true" duration-ms="4041" started-at="2018-11-26T14:32:47Z" finished-at="2018-11-26T14:32:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:32:51Z" finished-at="2018-11-26T14:32:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.login() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="login()[pri:1, instance:maintest.ClientCaseReg@756e4d]" name="login" duration-ms="7728" started-at="2018-11-26T14:32:51Z" finished-at="2018-11-26T14:32:59Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:32:59Z" finished-at="2018-11-26T14:32:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=ClientCaseReg.login()[pri:1, instance:maintest.ClientCaseReg@756e4d] output=Test Method resides in maintest.ClientCaseReg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.login() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:32:59Z" finished-at="2018-11-26T14:32:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.caseregistration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="caseregistration()[pri:2, instance:maintest.ClientCaseReg@756e4d]" name="caseregistration" duration-ms="102933" started-at="2018-11-26T14:32:59Z" depends-on-methods="maintest.ClientCaseReg.login" finished-at="2018-11-26T14:34:42Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- caseregistration -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="tearDown" is-config="true" duration-ms="0" started-at="2018-11-26T14:34:42Z" finished-at="2018-11-26T14:34:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=caseregistration status=SUCCESS method=ClientCaseReg.caseregistration()[pri:2, instance:maintest.ClientCaseReg@756e4d] output=Test Method resides in maintest.ClientCaseReg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.caseregistration() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:34:42Z" finished-at="2018-11-26T14:34:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.dataEntryAssign() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="dataEntryAssign()[pri:3, instance:maintest.ClientCaseReg@756e4d]" name="dataEntryAssign" duration-ms="60163" started-at="2018-11-26T14:34:42Z" depends-on-methods="maintest.ClientCaseReg.caseregistration" finished-at="2018-11-26T14:35:42Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- dataEntryAssign -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-11-26T14:35:42Z" finished-at="2018-11-26T14:35:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=dataEntryAssign status=SUCCESS method=ClientCaseReg.dataEntryAssign()[pri:3, instance:maintest.ClientCaseReg@756e4d] output=Test Method resides in maintest.ClientCaseReg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.dataEntryAssign() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:35:42Z" finished-at="2018-11-26T14:35:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.dataEntry() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="FAIL" signature="dataEntry()[pri:4, instance:maintest.ClientCaseReg@756e4d]" name="dataEntry" duration-ms="264534" started-at="2018-11-26T14:35:42Z" depends-on-methods="maintest.ClientCaseReg.dataEntryAssign" finished-at="2018-11-26T14:40:06Z">
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[unknown error: Element <span class="rtsTxt">...</span> is not clickable at point (74, 479). Other element would receive the click: <div class="raDiv">...</div>
  (Session info: headless chrome=70.0.3538.102)
  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 6.1.7601 SP1 x86) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'KAD-I-032', ip: '192.168.2.67', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.42.591088 (7b2b2dca23cca0..., userDataDir: C:\Users\admin\AppData\Loca...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:59037}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 70.0.3538.102, webStorageEnabled: true}
Session ID: 87d4d616fda5ba98176d1bb06915d638]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: unknown error: Element <span class="rtsTxt">...</span> is not clickable at point (74, 479). Other element would receive the click: <div class="raDiv">...</div>
  (Session info: headless chrome=70.0.3538.102)
  (Driver info: chromedriver=2.42.591088 (7b2b2dca23cca0862f674758c9a3933e685c27d5),platform=Windows NT 6.1.7601 SP1 x86) (WARNING: The server did not provide any stacktrace information)
Command duration or timeout: 0 milliseconds
Build info: version: '3.14.0', revision: 'aacccce0', time: '2018-08-02T20:19:58.91Z'
System info: host: 'KAD-I-032', ip: '192.168.2.67', os.name: 'Windows 7', os.arch: 'x86', os.version: '6.1', java.version: '1.8.0_181'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.42.591088 (7b2b2dca23cca0..., userDataDir: C:\Users\admin\AppData\Loca...}, cssSelectorsEnabled: true, databaseEnabled: false, goog:chromeOptions: {debuggerAddress: localhost:59037}, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: XP, platformName: XP, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 70.0.3538.102, webStorageEnabled: true}
Session ID: 87d4d616fda5ba98176d1bb06915d638
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.openqa.selenium.remote.ErrorHandler.createThrowable(ErrorHandler.java:214)
at org.openqa.selenium.remote.ErrorHandler.throwIfResponseFailed(ErrorHandler.java:166)
at org.openqa.selenium.remote.http.JsonHttpResponseCodec.reconstructValue(JsonHttpResponseCodec.java:40)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:80)
at org.openqa.selenium.remote.http.AbstractHttpResponseCodec.decode(AbstractHttpResponseCodec.java:44)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:158)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:83)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:548)
at org.openqa.selenium.remote.RemoteWebElement.execute(RemoteWebElement.java:276)
at org.openqa.selenium.remote.RemoteWebElement.click(RemoteWebElement.java:83)
at environment.Utill.click(Utill.java:243)
at dataEntry.Criminal.criminalcheck(Criminal.java:32)
at dataEntry.Criminal.CurrentAddress(Criminal.java:335)
at maintest.ClientCaseReg.dataEntry(ClientCaseReg.java:173)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Failed]]>
            </line>
          </reporter-output>
        </test-method> <!-- dataEntry -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="tearDown" is-config="true" duration-ms="14973" started-at="2018-11-26T14:40:06Z" finished-at="2018-11-26T14:40:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=dataEntry status=FAILURE method=ClientCaseReg.dataEntry()[pri:4, instance:maintest.ClientCaseReg@756e4d] output=Test Method resides in maintest.ClientCaseReg]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.ClientCaseReg.dataEntry() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="SKIP" signature="dataEntryQCAssign()[pri:5, instance:maintest.ClientCaseReg@756e4d]" name="dataEntryQCAssign" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntry" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.dataEntryQCAssign()[pri:5, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.dataEntryQCAssign()[pri:5, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- dataEntryQCAssign -->
        <test-method status="SKIP" signature="AddressDEQC()[pri:6, instance:maintest.ClientCaseReg@756e4d]" name="AddressDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.AddressDEQC()[pri:6, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.AddressDEQC()[pri:6, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- AddressDEQC -->
        <test-method status="SKIP" signature="EducationDEQC()[pri:7, instance:maintest.ClientCaseReg@756e4d]" name="EducationDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.EducationDEQC()[pri:7, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.EducationDEQC()[pri:7, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- EducationDEQC -->
        <test-method status="SKIP" signature="EmploymentDEQC()[pri:8, instance:maintest.ClientCaseReg@756e4d]" name="EmploymentDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.EmploymentDEQC()[pri:8, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.EmploymentDEQC()[pri:8, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- EmploymentDEQC -->
        <test-method status="SKIP" signature="ReferenceDEQC()[pri:9, instance:maintest.ClientCaseReg@756e4d]" name="ReferenceDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.ReferenceDEQC()[pri:9, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.ReferenceDEQC()[pri:9, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReferenceDEQC -->
        <test-method status="SKIP" signature="DataBaseDEQC()[pri:10, instance:maintest.ClientCaseReg@756e4d]" name="DataBaseDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.DataBaseDEQC()[pri:10, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.DataBaseDEQC()[pri:10, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- DataBaseDEQC -->
        <test-method status="SKIP" signature="CriminalDEQC()[pri:11, instance:maintest.ClientCaseReg@756e4d]" name="CriminalDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CriminalDEQC()[pri:11, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CriminalDEQC()[pri:11, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CriminalDEQC -->
        <test-method status="SKIP" signature="CreditDEQC()[pri:12, instance:maintest.ClientCaseReg@756e4d]" name="CreditDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CreditDEQC()[pri:12, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CreditDEQC()[pri:12, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CreditDEQC -->
        <test-method status="SKIP" signature="CourtDEQC()[pri:13, instance:maintest.ClientCaseReg@756e4d]" name="CourtDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CourtDEQC()[pri:13, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CourtDEQC()[pri:13, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CourtDEQC -->
        <test-method status="SKIP" signature="IdDEQC()[pri:14, instance:maintest.ClientCaseReg@756e4d]" name="IdDEQC" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.dataEntryQCAssign" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.IdDEQC()[pri:14, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.IdDEQC()[pri:14, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- IdDEQC -->
        <test-method status="SKIP" signature="VerificationSupervisor()[pri:15, instance:maintest.ClientCaseReg@756e4d]" name="VerificationSupervisor" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.IdDEQC" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.VerificationSupervisor()[pri:15, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.VerificationSupervisor()[pri:15, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- VerificationSupervisor -->
        <test-method status="SKIP" signature="VerificationIntiation()[pri:16, instance:maintest.ClientCaseReg@756e4d]" name="VerificationIntiation" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationSupervisor" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.VerificationIntiation()[pri:16, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.VerificationIntiation()[pri:16, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- VerificationIntiation -->
        <test-method status="SKIP" signature="AddressVerification()[pri:17, instance:maintest.ClientCaseReg@756e4d]" name="AddressVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.AddressVerification()[pri:17, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.AddressVerification()[pri:17, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- AddressVerification -->
        <test-method status="SKIP" signature="EmploymentVerification()[pri:19, instance:maintest.ClientCaseReg@756e4d]" name="EmploymentVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.EmploymentVerification()[pri:19, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.EmploymentVerification()[pri:19, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- EmploymentVerification -->
        <test-method status="SKIP" signature="EducationVerification()[pri:18, instance:maintest.ClientCaseReg@756e4d]" name="EducationVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.EducationVerification()[pri:18, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.EducationVerification()[pri:18, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- EducationVerification -->
        <test-method status="SKIP" signature="ReferenceVerification()[pri:20, instance:maintest.ClientCaseReg@756e4d]" name="ReferenceVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.ReferenceVerification()[pri:20, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.ReferenceVerification()[pri:20, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReferenceVerification -->
        <test-method status="SKIP" signature="CriminalVerification()[pri:22, instance:maintest.ClientCaseReg@756e4d]" name="CriminalVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CriminalVerification()[pri:22, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CriminalVerification()[pri:22, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CriminalVerification -->
        <test-method status="SKIP" signature="DatabaseVerification()[pri:21, instance:maintest.ClientCaseReg@756e4d]" name="DatabaseVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.DatabaseVerification()[pri:21, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.DatabaseVerification()[pri:21, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- DatabaseVerification -->
        <test-method status="SKIP" signature="CreditVerification()[pri:23, instance:maintest.ClientCaseReg@756e4d]" name="CreditVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CreditVerification()[pri:23, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CreditVerification()[pri:23, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CreditVerification -->
        <test-method status="SKIP" signature="CourtVerification()[pri:24, instance:maintest.ClientCaseReg@756e4d]" name="CourtVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CourtVerification()[pri:24, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CourtVerification()[pri:24, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CourtVerification -->
        <test-method status="SKIP" signature="DrugVerification()[pri:26, instance:maintest.ClientCaseReg@756e4d]" name="DrugVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.DrugVerification()[pri:26, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.DrugVerification()[pri:26, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- DrugVerification -->
        <test-method status="SKIP" signature="IDVerification()[pri:25, instance:maintest.ClientCaseReg@756e4d]" name="IDVerification" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.VerificationIntiation" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.IDVerification()[pri:25, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.IDVerification()[pri:25, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- IDVerification -->
        <test-method status="SKIP" signature="ReportGenerationSupervision()[pri:27, instance:maintest.ClientCaseReg@756e4d]" name="ReportGenerationSupervision" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.DrugVerification" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.ReportGenerationSupervision()[pri:27, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.ReportGenerationSupervision()[pri:27, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportGenerationSupervision -->
        <test-method status="SKIP" signature="AddressReportGeneration()[pri:28, instance:maintest.ClientCaseReg@756e4d]" name="AddressReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.AddressReportGeneration()[pri:28, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.AddressReportGeneration()[pri:28, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- AddressReportGeneration -->
        <test-method status="SKIP" signature="EducationReportGeneration()[pri:29, instance:maintest.ClientCaseReg@756e4d]" name="EducationReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.EducationReportGeneration()[pri:29, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.EducationReportGeneration()[pri:29, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- EducationReportGeneration -->
        <test-method status="SKIP" signature="EmploymentReportGeneration()[pri:30, instance:maintest.ClientCaseReg@756e4d]" name="EmploymentReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.EmploymentReportGeneration()[pri:30, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.EmploymentReportGeneration()[pri:30, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- EmploymentReportGeneration -->
        <test-method status="SKIP" signature="ReferenceReportGeneration()[pri:31, instance:maintest.ClientCaseReg@756e4d]" name="ReferenceReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.ReferenceReportGeneration()[pri:31, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.ReferenceReportGeneration()[pri:31, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReferenceReportGeneration -->
        <test-method status="SKIP" signature="CriminalReportGeneration()[pri:33, instance:maintest.ClientCaseReg@756e4d]" name="CriminalReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CriminalReportGeneration()[pri:33, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CriminalReportGeneration()[pri:33, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CriminalReportGeneration -->
        <test-method status="SKIP" signature="DatabaseReportGeneration()[pri:32, instance:maintest.ClientCaseReg@756e4d]" name="DatabaseReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.DatabaseReportGeneration()[pri:32, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.DatabaseReportGeneration()[pri:32, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- DatabaseReportGeneration -->
        <test-method status="SKIP" signature="CourtReportGeneration()[pri:35, instance:maintest.ClientCaseReg@756e4d]" name="CourtReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CourtReportGeneration()[pri:35, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CourtReportGeneration()[pri:35, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CourtReportGeneration -->
        <test-method status="SKIP" signature="CreditReportGeneration()[pri:34, instance:maintest.ClientCaseReg@756e4d]" name="CreditReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.CreditReportGeneration()[pri:34, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.CreditReportGeneration()[pri:34, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- CreditReportGeneration -->
        <test-method status="SKIP" signature="ReportGenerationSubmit()[pri:38, instance:maintest.ClientCaseReg@756e4d]" name="ReportGenerationSubmit" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.IdReportGeneration" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.ReportGenerationSubmit()[pri:38, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.ReportGenerationSubmit()[pri:38, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportGenerationSubmit -->
        <test-method status="SKIP" signature="IdReportGeneration()[pri:37, instance:maintest.ClientCaseReg@756e4d]" name="IdReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.IdReportGeneration()[pri:37, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.IdReportGeneration()[pri:37, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- IdReportGeneration -->
        <test-method status="SKIP" signature="DrugReportGeneration()[pri:36, instance:maintest.ClientCaseReg@756e4d]" name="DrugReportGeneration" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSupervision" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.DrugReportGeneration()[pri:36, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.DrugReportGeneration()[pri:36, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- DrugReportGeneration -->
        <test-method status="SKIP" signature="ReportValidation()[pri:40, instance:maintest.ClientCaseReg@756e4d]" name="ReportValidation" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportValidationSupervisor" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.ReportValidation()[pri:40, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.ReportValidation()[pri:40, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportValidation -->
        <test-method status="SKIP" signature="ReportValidationSupervisor()[pri:38, instance:maintest.ClientCaseReg@756e4d]" name="ReportValidationSupervisor" duration-ms="0" started-at="2018-11-26T14:40:21Z" depends-on-methods="maintest.ClientCaseReg.ReportGenerationSubmit" finished-at="2018-11-26T14:40:21Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method ClientCaseReg.ReportValidationSupervisor()[pri:38, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method ClientCaseReg.ReportValidationSupervisor()[pri:38, instance:maintest.ClientCaseReg@756e4d] depends on not successfully finished methods
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:888)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:295)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:84)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:90)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.ClientCaseReg]]>
            </line>
            <line>
              <![CDATA[Test Status: Skipped]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportValidationSupervisor -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="teardown" is-config="true" duration-ms="549" started-at="2018-11-26T14:40:21Z" finished-at="2018-11-26T14:40:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- maintest.ClientCaseReg -->
    </test> <!-- CLIENT CASE -->
    <test name="CANDIDATE CASE" duration-ms="1108800" started-at="2018-11-26T14:40:22Z" finished-at="2018-11-26T14:58:51Z">
      <class name="maintest.SPcasereg">
        <test-method status="PASS" signature="beforeSuit()[pri:0, instance:maintest.SPcasereg@7471b5]" name="beforeSuit" is-config="true" duration-ms="588" started-at="2018-11-26T13:22:22Z" finished-at="2018-11-26T13:22:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuit -->
        <test-method status="PASS" signature="beforeSuit()[pri:0, instance:maintest.FullFlow@e6e9c3]" name="beforeSuit" is-config="true" duration-ms="1" started-at="2018-11-26T13:22:22Z" finished-at="2018-11-26T13:22:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuit -->
        <test-method status="PASS" signature="beforeSuit()[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="beforeSuit" is-config="true" duration-ms="0" started-at="2018-11-26T13:22:22Z" finished-at="2018-11-26T13:22:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuit -->
        <test-method status="PASS" signature="beforeSuit()[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="beforeSuit" is-config="true" duration-ms="1" started-at="2018-11-26T13:22:22Z" finished-at="2018-11-26T13:22:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuit -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:maintest.SPcasereg@7471b5]" name="afterSuite" is-config="true" duration-ms="82" started-at="2018-11-26T14:58:51Z" finished-at="2018-11-26T14:58:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:maintest.FullFlow@e6e9c3]" name="afterSuite" is-config="true" duration-ms="95" started-at="2018-11-26T14:58:51Z" finished-at="2018-11-26T14:58:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:maintest.ClientCaseReg@756e4d]" name="afterSuite" is-config="true" duration-ms="42" started-at="2018-11-26T14:58:51Z" finished-at="2018-11-26T14:58:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="afterSuite" is-config="true" duration-ms="52" started-at="2018-11-26T14:58:51Z" finished-at="2018-11-26T14:58:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- maintest.SPcasereg -->
      <class name="maintest.CandidateCaseRegistration">
        <test-method status="PASS" signature="beforetest()[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="beforetest" is-config="true" duration-ms="3631" started-at="2018-11-26T14:40:22Z" finished-at="2018-11-26T14:40:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforetest -->
        <test-method status="PASS" signature="CandidateInitiate()[pri:1, instance:maintest.CandidateCaseRegistration@39f31e]" name="CandidateInitiate" duration-ms="4499" started-at="2018-11-26T14:40:26Z" finished-at="2018-11-26T14:40:30Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CandidateInitiate -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:40:26Z" finished-at="2018-11-26T14:40:26Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.CandidateInitiate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="341" started-at="2018-11-26T14:40:30Z" finished-at="2018-11-26T14:40:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CandidateInitiate status=SUCCESS method=CandidateCaseRegistration.CandidateInitiate()[pri:1, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.CandidateInitiate() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="CandidatedataEntry()[pri:2, instance:maintest.CandidateCaseRegistration@39f31e]" name="CandidatedataEntry" duration-ms="116195" started-at="2018-11-26T14:40:31Z" depends-on-methods="maintest.CandidateCaseRegistration.CandidateInitiate" finished-at="2018-11-26T14:42:27Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- CandidatedataEntry -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:40:31Z" finished-at="2018-11-26T14:40:31Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.CandidatedataEntry() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="82" started-at="2018-11-26T14:42:27Z" finished-at="2018-11-26T14:42:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=CandidatedataEntry status=SUCCESS method=CandidateCaseRegistration.CandidatedataEntry()[pri:2, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.CandidatedataEntry() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:42:27Z" finished-at="2018-11-26T14:42:27Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Address() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="Address()[pri:3, instance:maintest.CandidateCaseRegistration@39f31e]" name="Address" duration-ms="21880" started-at="2018-11-26T14:42:27Z" depends-on-methods="maintest.CandidateCaseRegistration.CandidatedataEntry" finished-at="2018-11-26T14:42:49Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- Address -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="70" started-at="2018-11-26T14:42:49Z" finished-at="2018-11-26T14:42:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Address status=SUCCESS method=CandidateCaseRegistration.Address()[pri:3, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Address() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:42:49Z" finished-at="2018-11-26T14:42:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Education() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="Education()[pri:4, instance:maintest.CandidateCaseRegistration@39f31e]" name="Education" duration-ms="5122" started-at="2018-11-26T14:42:49Z" depends-on-methods="maintest.CandidateCaseRegistration.CandidatedataEntry" finished-at="2018-11-26T14:42:54Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- Education -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="68" started-at="2018-11-26T14:42:54Z" finished-at="2018-11-26T14:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Education status=SUCCESS method=CandidateCaseRegistration.Education()[pri:4, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Education() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:42:54Z" finished-at="2018-11-26T14:42:54Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Employment() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="Employment()[pri:5, instance:maintest.CandidateCaseRegistration@39f31e]" name="Employment" duration-ms="5179" started-at="2018-11-26T14:42:54Z" depends-on-methods="maintest.CandidateCaseRegistration.CandidatedataEntry" finished-at="2018-11-26T14:42:59Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- Employment -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="66" started-at="2018-11-26T14:42:59Z" finished-at="2018-11-26T14:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Employment status=SUCCESS method=CandidateCaseRegistration.Employment()[pri:5, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Employment() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="VoterId()[pri:6, instance:maintest.CandidateCaseRegistration@39f31e]" name="VoterId" duration-ms="4800" started-at="2018-11-26T14:42:59Z" depends-on-methods="maintest.CandidateCaseRegistration.CandidatedataEntry" finished-at="2018-11-26T14:43:04Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- VoterId -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:42:59Z" finished-at="2018-11-26T14:42:59Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.VoterId() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="63" started-at="2018-11-26T14:43:04Z" finished-at="2018-11-26T14:43:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VoterId status=SUCCESS method=CandidateCaseRegistration.VoterId()[pri:6, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.VoterId() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:43:04Z" finished-at="2018-11-26T14:43:04Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Reference() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="Reference()[pri:7, instance:maintest.CandidateCaseRegistration@39f31e]" name="Reference" duration-ms="4969" started-at="2018-11-26T14:43:04Z" depends-on-methods="maintest.CandidateCaseRegistration.CandidatedataEntry" finished-at="2018-11-26T14:43:09Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- Reference -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="66" started-at="2018-11-26T14:43:09Z" finished-at="2018-11-26T14:43:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Reference status=SUCCESS method=CandidateCaseRegistration.Reference()[pri:7, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.Reference() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:43:09Z" finished-at="2018-11-26T14:43:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ClientSubmit() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ClientSubmit()[pri:8, instance:maintest.CandidateCaseRegistration@39f31e]" name="ClientSubmit" duration-ms="30023" started-at="2018-11-26T14:43:09Z" depends-on-methods="maintest.CandidateCaseRegistration.CandidatedataEntry" finished-at="2018-11-26T14:43:39Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ClientSubmit -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="47" started-at="2018-11-26T14:43:39Z" finished-at="2018-11-26T14:43:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ClientSubmit status=SUCCESS method=CandidateCaseRegistration.ClientSubmit()[pri:8, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ClientSubmit() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:43:39Z" finished-at="2018-11-26T14:43:39Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.DataEntryQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="DataEntryQC()[pri:9, instance:maintest.CandidateCaseRegistration@39f31e]" name="DataEntryQC" duration-ms="108337" started-at="2018-11-26T14:43:39Z" depends-on-methods="maintest.CandidateCaseRegistration.ClientSubmit" finished-at="2018-11-26T14:45:28Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- DataEntryQC -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="56" started-at="2018-11-26T14:45:28Z" finished-at="2018-11-26T14:45:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DataEntryQC status=SUCCESS method=CandidateCaseRegistration.DataEntryQC()[pri:9, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.DataEntryQC() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:45:28Z" finished-at="2018-11-26T14:45:28Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.VerificationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="VerificationSupervisor()[pri:9, instance:maintest.CandidateCaseRegistration@39f31e]" name="VerificationSupervisor" duration-ms="38405" started-at="2018-11-26T14:45:28Z" depends-on-methods="maintest.CandidateCaseRegistration.ClientSubmit" finished-at="2018-11-26T14:46:06Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- VerificationSupervisor -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="65" started-at="2018-11-26T14:46:06Z" finished-at="2018-11-26T14:46:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerificationSupervisor status=SUCCESS method=CandidateCaseRegistration.VerificationSupervisor()[pri:9, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.VerificationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="VerificationIntiation()[pri:10, instance:maintest.CandidateCaseRegistration@39f31e]" name="VerificationIntiation" duration-ms="229759" started-at="2018-11-26T14:46:06Z" depends-on-methods="maintest.CandidateCaseRegistration.VerificationSupervisor" finished-at="2018-11-26T14:49:56Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- VerificationIntiation -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:46:06Z" finished-at="2018-11-26T14:46:06Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.VerificationIntiation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="104" started-at="2018-11-26T14:49:56Z" finished-at="2018-11-26T14:49:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerificationIntiation status=SUCCESS method=CandidateCaseRegistration.VerificationIntiation()[pri:10, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.VerificationIntiation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:49:56Z" finished-at="2018-11-26T14:49:56Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.AddressVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="AddressVerification()[pri:11, instance:maintest.CandidateCaseRegistration@39f31e]" name="AddressVerification" duration-ms="100547" started-at="2018-11-26T14:49:56Z" depends-on-methods="maintest.CandidateCaseRegistration.VerificationIntiation" finished-at="2018-11-26T14:51:36Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- AddressVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="81" started-at="2018-11-26T14:51:36Z" finished-at="2018-11-26T14:51:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AddressVerification status=SUCCESS method=CandidateCaseRegistration.AddressVerification()[pri:11, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.AddressVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:51:37Z" finished-at="2018-11-26T14:51:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.EducationVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EducationVerification()[pri:12, instance:maintest.CandidateCaseRegistration@39f31e]" name="EducationVerification" duration-ms="58785" started-at="2018-11-26T14:51:37Z" depends-on-methods="maintest.CandidateCaseRegistration.VerificationIntiation" finished-at="2018-11-26T14:52:35Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EducationVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="77" started-at="2018-11-26T14:52:35Z" finished-at="2018-11-26T14:52:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EducationVerification status=SUCCESS method=CandidateCaseRegistration.EducationVerification()[pri:12, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.EducationVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:52:35Z" finished-at="2018-11-26T14:52:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.EmploymentVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="EmploymentVerification()[pri:13, instance:maintest.CandidateCaseRegistration@39f31e]" name="EmploymentVerification" duration-ms="53952" started-at="2018-11-26T14:52:35Z" depends-on-methods="maintest.CandidateCaseRegistration.VerificationIntiation" finished-at="2018-11-26T14:53:29Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- EmploymentVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="69" started-at="2018-11-26T14:53:29Z" finished-at="2018-11-26T14:53:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=EmploymentVerification status=SUCCESS method=CandidateCaseRegistration.EmploymentVerification()[pri:13, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.EmploymentVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:53:29Z" finished-at="2018-11-26T14:53:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReferenceVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReferenceVerification()[pri:14, instance:maintest.CandidateCaseRegistration@39f31e]" name="ReferenceVerification" duration-ms="51346" started-at="2018-11-26T14:53:29Z" depends-on-methods="maintest.CandidateCaseRegistration.VerificationIntiation" finished-at="2018-11-26T14:54:21Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReferenceVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="64" started-at="2018-11-26T14:54:21Z" finished-at="2018-11-26T14:54:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReferenceVerification status=SUCCESS method=CandidateCaseRegistration.ReferenceVerification()[pri:14, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReferenceVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:54:21Z" finished-at="2018-11-26T14:54:21Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.IDVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="IDVerification()[pri:15, instance:maintest.CandidateCaseRegistration@39f31e]" name="IDVerification" duration-ms="50183" started-at="2018-11-26T14:54:21Z" depends-on-methods="maintest.CandidateCaseRegistration.VerificationIntiation" finished-at="2018-11-26T14:55:11Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- IDVerification -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="73" started-at="2018-11-26T14:55:11Z" finished-at="2018-11-26T14:55:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=IDVerification status=SUCCESS method=CandidateCaseRegistration.IDVerification()[pri:15, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.IDVerification() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:55:11Z" finished-at="2018-11-26T14:55:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportGenerationSupervision() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReportGenerationSupervision()[pri:16, instance:maintest.CandidateCaseRegistration@39f31e]" name="ReportGenerationSupervision" duration-ms="71277" started-at="2018-11-26T14:55:11Z" depends-on-methods="maintest.CandidateCaseRegistration.IDVerification" finished-at="2018-11-26T14:56:22Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportGenerationSupervision -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="88" started-at="2018-11-26T14:56:22Z" finished-at="2018-11-26T14:56:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportGenerationSupervision status=SUCCESS method=CandidateCaseRegistration.ReportGenerationSupervision()[pri:16, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportGenerationSupervision() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:56:22Z" finished-at="2018-11-26T14:56:22Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportGenerationSubmit() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReportGenerationSubmit()[pri:17, instance:maintest.CandidateCaseRegistration@39f31e]" name="ReportGenerationSubmit" duration-ms="60542" started-at="2018-11-26T14:56:22Z" depends-on-methods="maintest.CandidateCaseRegistration.ReportGenerationSupervision" finished-at="2018-11-26T14:57:23Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportGenerationSubmit -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="82" started-at="2018-11-26T14:57:23Z" finished-at="2018-11-26T14:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportGenerationSubmit status=SUCCESS method=CandidateCaseRegistration.ReportGenerationSubmit()[pri:17, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportGenerationSubmit() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="ReportValidationSupervisor()[pri:18, instance:maintest.CandidateCaseRegistration@39f31e]" name="ReportValidationSupervisor" duration-ms="36624" started-at="2018-11-26T14:57:23Z" depends-on-methods="maintest.CandidateCaseRegistration.ReportGenerationSubmit" finished-at="2018-11-26T14:58:00Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportValidationSupervisor -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="0" started-at="2018-11-26T14:57:23Z" finished-at="2018-11-26T14:57:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportValidationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="86" started-at="2018-11-26T14:58:00Z" finished-at="2018-11-26T14:58:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportValidationSupervisor status=SUCCESS method=CandidateCaseRegistration.ReportValidationSupervisor()[pri:18, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportValidationSupervisor() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="setup(java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="setup" is-config="true" duration-ms="1" started-at="2018-11-26T14:58:00Z" finished-at="2018-11-26T14:58:00Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportValidation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="ReportValidation()[pri:19, instance:maintest.CandidateCaseRegistration@39f31e]" name="ReportValidation" duration-ms="50428" started-at="2018-11-26T14:58:00Z" depends-on-methods="maintest.CandidateCaseRegistration.ReportValidationSupervisor" finished-at="2018-11-26T14:58:50Z">
          <reporter-output>
            <line>
              <![CDATA[Test Method resides in maintest.CandidateCaseRegistration]]>
            </line>
            <line>
              <![CDATA[Test Status: Pass]]>
            </line>
          </reporter-output>
        </test-method> <!-- ReportValidation -->
        <test-method status="PASS" signature="tearDown(org.testng.ITestResult, java.lang.reflect.Method)[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="tearDown" is-config="true" duration-ms="87" started-at="2018-11-26T14:58:50Z" finished-at="2018-11-26T14:58:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=ReportValidation status=SUCCESS method=CandidateCaseRegistration.ReportValidation()[pri:19, instance:maintest.CandidateCaseRegistration@39f31e] output=Test Method resides in maintest.CandidateCaseRegistration]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public void maintest.CandidateCaseRegistration.ReportValidation() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:maintest.CandidateCaseRegistration@39f31e]" name="teardown" is-config="true" duration-ms="548" started-at="2018-11-26T14:58:50Z" finished-at="2018-11-26T14:58:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- maintest.CandidateCaseRegistration -->
    </test> <!-- CANDIDATE CASE -->
  </suite> <!-- regression testing -->
</testng-results>
